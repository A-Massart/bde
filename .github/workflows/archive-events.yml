name: Archive Past Events

on:
  schedule:
    # Ex√©cute tous les jours √† 2h00 UTC (3h00 en France en hiver, 4h00 en √©t√©)
    - cron: '0 2 * * *'
  workflow_dispatch: # Permet d'ex√©cuter manuellement depuis l'interface GitHub

jobs:
  archive-events:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Permet de pousser des commits
      pull-requests: read  # Permet de lire les PRs si n√©cessaire
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # R√©cup√®re tout l'historique Git

    - name: Archive past events
      run: |
        # Cr√©er le dossier archive s'il n'existe pas
        mkdir -p _archive
        
        # Date d'aujourd'hui au format YYYY-MM-DD
        TODAY=$(date +%Y-%m-%d)
        echo "üìÖ Date d'aujourd'hui: $TODAY"
        
        moved_count=0
        
        # V√©rifier si le dossier _events existe et contient des fichiers .md
        if [ ! -d "_events" ]; then
          echo "‚ö†Ô∏è  Dossier _events/ n'existe pas"
          exit 0
        fi
        
        # Parcourir tous les fichiers .md dans _events/
        shopt -s nullglob  # √âvite les erreurs si pas de fichiers correspondants
        for file in _events/*.md; do
          # V√©rifier si le fichier existe (√©vite les erreurs si pas de fichiers .md)
          if [[ ! -f "$file" ]]; then
            continue
          fi
          
          # Ignorer .gitkeep
          if [[ "$file" == "_events/.gitkeep" ]]; then
            continue
          fi
          
          # Extraire la date du nom de fichier (format: YYYY-MM-DD-nom.md)
          filename=$(basename "$file")
          date_from_filename=$(echo "$filename" | grep -o '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}')
          
          if [[ -n "$date_from_filename" ]]; then
            echo "üîç Fichier: $filename (date: $date_from_filename)"
            
            # Comparer les dates (format YYYY-MM-DD se compare directement)
            if [[ "$date_from_filename" < "$TODAY" ]]; then
              archive_path="_archive/$filename"
              
              # V√©rifier si le fichier n'existe pas d√©j√† dans les archives
              if [[ ! -f "$archive_path" ]]; then
                if mv "$file" "$archive_path"; then
                  echo "‚úÖ D√©plac√©: $filename"
                  moved_count=$((moved_count + 1))
                else
                  echo "‚ùå Erreur lors du d√©placement de: $filename"
                fi
              else
                echo "‚ö†Ô∏è  Fichier d√©j√† dans les archives: $filename"
                if rm "$file"; then
                  echo "üóëÔ∏è  Doublon supprim√©: $filename"
                else
                  echo "‚ùå Erreur lors de la suppression du doublon: $filename"
                fi
              fi
            else
              echo "‚è≥ √âv√©nement futur: $filename"
            fi
          else
            echo "‚ùå Impossible d'extraire la date de: $filename"
          fi
        done
        
        echo ""
        echo "üìä R√©sum√©:"
        echo "   - √âv√©nements d√©plac√©s: $moved_count"
        echo "   - Date de traitement: $TODAY"
        
        # Cr√©er un fichier de log pour le commit seulement s'il y a des changements
        if [ $moved_count -gt 0 ]; then
          echo "Archive automatique du $TODAY" > archive-log.txt
          echo "√âv√©nements d√©plac√©s: $moved_count" >> archive-log.txt
        else
          echo "‚úÖ Aucun √©v√©nement √† archiver aujourd'hui"
        fi

    - name: Check for changes
      id: check-changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
        else
          echo "changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push changes
      if: steps.check-changes.outputs.changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Ajouter tous les changements
        git add .
        
        # Cr√©er le message de commit
        COMMIT_MSG="ü§ñ Archive automatique des √©v√©nements pass√©s"
        if [ -f archive-log.txt ]; then
          COMMIT_MSG="$COMMIT_MSG - $(cat archive-log.txt)"
        fi
        
        git commit -m "$COMMIT_MSG"
        git push
        
        # Nettoyer le fichier de log
        rm -f archive-log.txt

    - name: Create summary
      if: always()
      run: |
        echo "## üìÖ Archive des √âv√©nements Pass√©s" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Date d'ex√©cution:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f archive-log.txt ]; then
          echo "**R√©sultat:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat archive-log.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "**R√©sultat:** ‚úÖ Aucun √©v√©nement √† archiver aujourd'hui" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Tous les √©v√©nements dans \`_events/\` sont encore √† venir." >> $GITHUB_STEP_SUMMARY
        fi
